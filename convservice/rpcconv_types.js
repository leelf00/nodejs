//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Html2PdfReq = module.exports.Html2PdfReq = function(args) {
  this.format = null;
  this.orientation = null;
  this.showpage = null;
  this.width = null;
  this.height = null;
  this.html = null;
  if (args) {
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
    if (args.orientation !== undefined && args.orientation !== null) {
      this.orientation = args.orientation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field orientation is unset!');
    }
    if (args.showpage !== undefined && args.showpage !== null) {
      this.showpage = args.showpage;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
  }
};
Html2PdfReq.prototype = {};
Html2PdfReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orientation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.showpage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.width = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.height = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Html2PdfReq.prototype.write = function(output) {
  output.writeStructBegin('Html2PdfReq');
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 1);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.orientation !== null && this.orientation !== undefined) {
    output.writeFieldBegin('orientation', Thrift.Type.STRING, 2);
    output.writeString(this.orientation);
    output.writeFieldEnd();
  }
  if (this.showpage !== null && this.showpage !== undefined) {
    output.writeFieldBegin('showpage', Thrift.Type.STRING, 3);
    output.writeString(this.showpage);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.STRING, 4);
    output.writeString(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.STRING, 5);
    output.writeString(this.height);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 6);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Html2PdfRes = module.exports.Html2PdfRes = function(args) {
  this.resp_code = null;
  this.message = null;
  this.content = null;
  if (args) {
    if (args.resp_code !== undefined && args.resp_code !== null) {
      this.resp_code = args.resp_code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resp_code is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field content is unset!');
    }
  }
};
Html2PdfRes.prototype = {};
Html2PdfRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.resp_code = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Html2PdfRes.prototype.write = function(output) {
  output.writeStructBegin('Html2PdfRes');
  if (this.resp_code !== null && this.resp_code !== undefined) {
    output.writeFieldBegin('resp_code', Thrift.Type.BYTE, 1);
    output.writeByte(this.resp_code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

